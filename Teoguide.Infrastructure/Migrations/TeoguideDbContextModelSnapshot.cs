// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teoguide.Infrastructure.Context;

namespace Teoguide.Infrastructure.Migrations
{
    [DbContext(typeof(TeoguideDbContext))]
    partial class TeoguideDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Actividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentroHistoricoId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoraActividad")
                        .HasColumnType("time(0)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentroHistoricoId");

                    b.HasIndex("PlanId");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.CentroHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CentroHistoricos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Acceso Caral, Caral 15161",
                            ImgUrl = "https://i.imgur.com/FPfbY3Y.jpg",
                            Latitud = "-10.892196046322377",
                            Longitud = "-77.52333687113237",
                            Nombre = "Caral"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Esquina con avenida El Rosario y, Av. Nicolas de Rivera 201, San Isidro",
                            ImgUrl = "https://i.imgur.com/Ql68krK.jpg",
                            Latitud = "-12.097147060919646",
                            Longitud = "-77.04048228878406",
                            Nombre = "Huaca Huallamarca"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Talavera, Cercado de Lima 15083",
                            ImgUrl = "https://i.imgur.com/u8IRRd1.jpg",
                            Latitud = "-12.067163839786117",
                            Longitud = "-77.06362247344228",
                            Nombre = "Huaca Mateo-Salado"
                        });
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentroHistoricoId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CentroHistoricoId = 1,
                            Texto = "Luego de visitar Caral puedes darte una vuelta al valle de Supe no te arrepentirás",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            CentroHistoricoId = 1,
                            Texto = "Impresionante lugar, los guías turísticos fueron muy pacientes al enseñar sobre Caral",
                            UsuarioId = 2
                        },
                        new
                        {
                            Id = 3,
                            CentroHistoricoId = 1,
                            Texto = "Recomendadísimo este sitio arqueológico para visitar y aprender más de nuestro Perú",
                            UsuarioId = 4
                        },
                        new
                        {
                            Id = 4,
                            CentroHistoricoId = 1,
                            Texto = "Algo cansado el viaje para llegar a Caral, pero las ruinas, la historia y el paisaje del valle de supe hacen que valga la pena",
                            UsuarioId = 5
                        },
                        new
                        {
                            Id = 5,
                            CentroHistoricoId = 2,
                            Texto = "Un destino turístico interesante en el mismo centro de la ciudad de Lima, genial!",
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 6,
                            CentroHistoricoId = 3,
                            Texto = "Pense que sería solo unas pequeñas ruinas, pero me equivoqué, este lugar es impresionante!!",
                            UsuarioId = 6
                        });
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Descripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentroHistoricoId")
                        .HasColumnType("int");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CentroHistoricoId");

                    b.ToTable("Descripciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CentroHistoricoId = 1,
                            Idioma = "ESP",
                            Texto = "La Ciudad Sagrada de Caral es un interesante sitio arqueológico ubicado en el Valle de Supe."
                        },
                        new
                        {
                            Id = 2,
                            CentroHistoricoId = 2,
                            Idioma = "ESP",
                            Texto = "Considerada como un centro ceremorial, tiene la forma de una pirámide trunca con tres plataformas superpuestas."
                        },
                        new
                        {
                            Id = 3,
                            CentroHistoricoId = 3,
                            Idioma = "ESP",
                            Texto = "El complejo arqueológico de Mateo Salado está constituido por cinco montículos piramidales."
                        });
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Multimedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentroHistoricoId")
                        .HasColumnType("int");

                    b.Property<string>("ContendioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<bool>("Verificado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CentroHistoricoId");

                    b.ToTable("Multimedias");
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaPlan")
                        .HasColumnType("date");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contrasenya")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "Ramirez Castro",
                            Contrasenya = "123456",
                            Correo = "natalia.ramirez@gmail.com",
                            ImagenUrl = "https://i.imgur.com/Bvwppza.png",
                            Nombres = "Natalia",
                            Tipo = "TURISTA_LOCAL"
                        },
                        new
                        {
                            Id = 2,
                            Apellidos = "Lovera Tarazona",
                            Contrasenya = "123456",
                            Correo = "vero.lovera@gmail.com",
                            ImagenUrl = "https://i.imgur.com/K6GcFKt.png",
                            Nombres = "Veronica",
                            Tipo = "TURISTA_LOCAL"
                        },
                        new
                        {
                            Id = 3,
                            Apellidos = "Salgado Perez",
                            Contrasenya = "123456",
                            Correo = "lody.salgado@gmail.com",
                            ImagenUrl = "https://i.imgur.com/gtBtZhC.png",
                            Nombres = "Melody",
                            Tipo = "TURISTA_LOCAL"
                        },
                        new
                        {
                            Id = 4,
                            Apellidos = "Castro Gutierrez",
                            Contrasenya = "123456",
                            Correo = "mateo.castro@gmail.com",
                            ImagenUrl = "https://i.imgur.com/juP6DaG.png",
                            Nombres = "Mateo",
                            Tipo = "TURISTA_LOCAL"
                        },
                        new
                        {
                            Id = 5,
                            Apellidos = "Buenaventura Puertas",
                            Contrasenya = "123456",
                            Correo = "albedo.puertas@gmail.com",
                            ImagenUrl = "https://i.imgur.com/LcnD5hf.png",
                            Nombres = "Albedo",
                            Tipo = "TURISTA_LOCAL"
                        },
                        new
                        {
                            Id = 6,
                            Apellidos = "Aquino Perez",
                            Contrasenya = "123456",
                            Correo = "Jorge.aquino@gmail.com",
                            ImagenUrl = "https://i.imgur.com/juP6DaG.png",
                            Nombres = "Jorge",
                            Tipo = "TURISTA_LOCAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Actividad", b =>
                {
                    b.HasOne("Teoguide.Domain.Entity.CentroHistorico", "CentroHistorico")
                        .WithMany()
                        .HasForeignKey("CentroHistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teoguide.Domain.Entity.Plan", null)
                        .WithMany("Actividades")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Comentario", b =>
                {
                    b.HasOne("Teoguide.Domain.Entity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Descripcion", b =>
                {
                    b.HasOne("Teoguide.Domain.Entity.CentroHistorico", null)
                        .WithMany("Descripciones")
                        .HasForeignKey("CentroHistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teoguide.Domain.Entity.Multimedia", b =>
                {
                    b.HasOne("Teoguide.Domain.Entity.CentroHistorico", null)
                        .WithMany("Multimedias")
                        .HasForeignKey("CentroHistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
